module {
  func.func @dot_product(%arg0: !openfhe.crypto_context, %arg1: !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, %arg2: !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = i16> {
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c4 = arith.constant 4 : index
    %c7 = arith.constant 7 : index
    %0 = openfhe.mul_no_relin %arg0, %arg1, %arg2 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <dimension = 3, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %1 = openfhe.relin %arg0, %0 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <dimension = 3, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %2 = arith.index_cast %c4 : index to i64
    %3 = openfhe.rot %arg0, %1, %2 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, i64) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %4 = openfhe.add %arg0, %1, %3 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %5 = arith.index_cast %c2 : index to i64
    %6 = openfhe.rot %arg0, %4, %5 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, i64) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %7 = openfhe.add %arg0, %4, %6 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %8 = arith.index_cast %c1 : index to i64
    %9 = openfhe.rot %arg0, %7, %8 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, i64) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %10 = openfhe.add %arg0, %7, %9 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %cst = arith.constant dense<[0, 0, 0, 0, 0, 0, 0, 1]> : tensor<8xi16>
    %11 = lwe.rlwe_encode %cst {encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = #_polynomial.ring<cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>} : tensor<8xi16> -> !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>
    %12 = openfhe.mul_plain %arg0, %10, %11 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %13 = arith.index_cast %c7 : index to i64
    %14 = openfhe.rot %arg0, %12, %13 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>, i64) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    %15 = lwe.reinterpret_underlying_type %14 : !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>> to !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = i16>
    return %15 : !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = i16>
  }
  func.func @dot_product__encrypt__arg0(%arg0: !openfhe.crypto_context, %arg1: tensor<8xi16>, %arg2: !openfhe.public_key) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>> {
    %0 = lwe.rlwe_encode %arg1 {encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = #_polynomial.ring<cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>} : tensor<8xi16> -> !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>
    %1 = openfhe.encrypt %arg0, %0, %arg2 : (!openfhe.crypto_context, !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>, !openfhe.public_key) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    return %1 : !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
  }
  func.func @dot_product__encrypt__arg1(%arg0: !openfhe.crypto_context, %arg1: tensor<8xi16>, %arg2: !openfhe.public_key) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>> {
    %0 = lwe.rlwe_encode %arg1 {encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = #_polynomial.ring<cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>} : tensor<8xi16> -> !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>
    %1 = openfhe.encrypt %arg0, %0, %arg2 : (!openfhe.crypto_context, !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = tensor<8xi16>>, !openfhe.public_key) -> !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
    return %1 : !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = tensor<8xi16>>
  }
  func.func @dot_product__decrypt__result0(%arg0: !openfhe.crypto_context, %arg1: !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = i16>, %arg2: !openfhe.private_key) -> i16 {
    %0 = openfhe.decrypt %arg0, %arg1, %arg2 : (!openfhe.crypto_context, !lwe.rlwe_ciphertext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, rlwe_params = <ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>>, underlying_type = i16>, !openfhe.private_key) -> !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = i16>
    %1 = lwe.rlwe_decode %0 {encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = #_polynomial.ring<cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>} : !lwe.rlwe_plaintext<encoding = #lwe.polynomial_evaluation_encoding<cleartext_start = 16, cleartext_bitwidth = 16>, ring = <cmod=463187969, ideal=#_polynomial.polynomial<1 + x**8>>, underlying_type = i16> -> i16
    return %1 : i16
  }
}

